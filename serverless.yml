service: crypto-notification
frameworkVersion: '3'

plugins:
  - serverless-dotenv-plugin

useDotenv: true

custom:
  tatumSecret: ${ssm:/aws/reference/secretsmanager/tatumSecret}

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-southeast-1
  stage: dev
  environment:
    api_key: ${self:custom.tatumSecret.tatumApiKey}
    MNEMONIC: ${self:custom.tatumSecret.mnemonicETH}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "secretsmanager:GetSecretValue"
          Resource:
            - !Sub "arn:aws:secretsmanager:*:*:secret:*"      
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"
            - "arn:aws:execute-api:*:*:*/@connections/*"      
        - Effect: Allow
          Action:
            - lambda:*
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - lambda:InvokeFunction
          Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"    
        - Effect: Allow
          Action:
            - SQS:SendMessage
            - SQS:DeleteMessage
            - SQS:GetQueueUrl
            - SQS:ReceiveMessage
          Resource:
            - !Sub "arn:aws:sqs:ap-southeast-1:271524046545:midas-crypto-deposit-queue"               

functions:
  # notification:
  #   name: midas-crypto-notification
  #   handler: handler.cryptoSubscription
  #   events:
  #     - http: 
  #         path: notification
  #         method: post

  trapper:
    name: midas-crypto-notification-trapper
    handler: handler.notificationTrapper
    events:
      - http: 
          path: notification-trapper
          method: any